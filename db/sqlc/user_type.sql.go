// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user_type.sql

package db

import (
	"context"
)

const createUserType = `-- name: CreateUserType :one
INSERT INTO access.user_type (
    description
) VALUES (
    $1
)
RETURNING id, description
`

func (q *Queries) CreateUserType(ctx context.Context, description string) (AccessUserType, error) {
	row := q.db.QueryRowContext(ctx, createUserType, description)
	var i AccessUserType
	err := row.Scan(&i.ID, &i.Description)
	return i, err
}

const deleteUserType = `-- name: DeleteUserType :exec
DELETE FROM access.user_type
WHERE id = $1
`

func (q *Queries) DeleteUserType(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserType, id)
	return err
}

const getUserType = `-- name: GetUserType :one
SELECT id, description FROM access.user_type
WHERE id = $1
`

func (q *Queries) GetUserType(ctx context.Context, id int32) (AccessUserType, error) {
	row := q.db.QueryRowContext(ctx, getUserType, id)
	var i AccessUserType
	err := row.Scan(&i.ID, &i.Description)
	return i, err
}

const listUserTypes = `-- name: ListUserTypes :many
SELECT id, description FROM access.user_type
ORDER BY description
LIMIT $1 OFFSET $2
`

type ListUserTypesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserTypes(ctx context.Context, arg ListUserTypesParams) ([]AccessUserType, error) {
	rows, err := q.db.QueryContext(ctx, listUserTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccessUserType
	for rows.Next() {
		var i AccessUserType
		if err := rows.Scan(&i.ID, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserType = `-- name: UpdateUserType :one
UPDATE access.user_type
SET
  description = $2
WHERE id = $1
RETURNING id, description
`

type UpdateUserTypeParams struct {
	ID          int32  `json:"id"`
	Description string `json:"description"`
}

func (q *Queries) UpdateUserType(ctx context.Context, arg UpdateUserTypeParams) (AccessUserType, error) {
	row := q.db.QueryRowContext(ctx, updateUserType, arg.ID, arg.Description)
	var i AccessUserType
	err := row.Scan(&i.ID, &i.Description)
	return i, err
}
