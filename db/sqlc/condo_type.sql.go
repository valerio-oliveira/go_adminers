// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: condo_type.sql

package db

import (
	"context"
)

const createCondoType = `-- name: CreateCondoType :one
INSERT INTO registration.condo_type (
    description
) VALUES (
    $1
)
RETURNING id, description
`

func (q *Queries) CreateCondoType(ctx context.Context, description string) (RegistrationCondoType, error) {
	row := q.db.QueryRowContext(ctx, createCondoType, description)
	var i RegistrationCondoType
	err := row.Scan(&i.ID, &i.Description)
	return i, err
}

const deleteCondoType = `-- name: DeleteCondoType :exec
DELETE FROM registration.condo_type
WHERE id = $1
`

func (q *Queries) DeleteCondoType(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCondoType, id)
	return err
}

const getCondoType = `-- name: GetCondoType :one
SELECT id, description FROM registration.condo_type
WHERE id = $1
`

func (q *Queries) GetCondoType(ctx context.Context, id int32) (RegistrationCondoType, error) {
	row := q.db.QueryRowContext(ctx, getCondoType, id)
	var i RegistrationCondoType
	err := row.Scan(&i.ID, &i.Description)
	return i, err
}

const listCondoTypes = `-- name: ListCondoTypes :many
SELECT id, description FROM registration.condo_type
ORDER BY description
LIMIT $1 OFFSET $2
`

type ListCondoTypesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCondoTypes(ctx context.Context, arg ListCondoTypesParams) ([]RegistrationCondoType, error) {
	rows, err := q.db.QueryContext(ctx, listCondoTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RegistrationCondoType
	for rows.Next() {
		var i RegistrationCondoType
		if err := rows.Scan(&i.ID, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCondoType = `-- name: UpdateCondoType :one
UPDATE registration.condo_type
SET
  description = $2
WHERE id = $1
RETURNING id, description
`

type UpdateCondoTypeParams struct {
	ID          int32  `json:"id"`
	Description string `json:"description"`
}

func (q *Queries) UpdateCondoType(ctx context.Context, arg UpdateCondoTypeParams) (RegistrationCondoType, error) {
	row := q.db.QueryRowContext(ctx, updateCondoType, arg.ID, arg.Description)
	var i RegistrationCondoType
	err := row.Scan(&i.ID, &i.Description)
	return i, err
}
