// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: supplier.sql

package db

import (
	"context"
)

const createSupplier = `-- name: CreateSupplier :one
INSERT INTO registration.supplier (
    id_supplier_type, description
) VALUES (
    $1, $2
)
RETURNING id, id_supplier_type, description
`

type CreateSupplierParams struct {
	IDSupplierType int32  `json:"id_supplier_type"`
	Description    string `json:"description"`
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) (RegistrationSupplier, error) {
	row := q.db.QueryRowContext(ctx, createSupplier, arg.IDSupplierType, arg.Description)
	var i RegistrationSupplier
	err := row.Scan(&i.ID, &i.IDSupplierType, &i.Description)
	return i, err
}

const deleteSupplier = `-- name: DeleteSupplier :exec
DELETE FROM registration.supplier
WHERE id = $1
`

func (q *Queries) DeleteSupplier(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSupplier, id)
	return err
}

const getSupplier = `-- name: GetSupplier :one
SELECT id, id_supplier_type, description FROM registration.supplier
WHERE id = $1
`

func (q *Queries) GetSupplier(ctx context.Context, id int32) (RegistrationSupplier, error) {
	row := q.db.QueryRowContext(ctx, getSupplier, id)
	var i RegistrationSupplier
	err := row.Scan(&i.ID, &i.IDSupplierType, &i.Description)
	return i, err
}

const listSuppliers = `-- name: ListSuppliers :many
SELECT id, id_supplier_type, description FROM registration.supplier
ORDER BY description
LIMIT $1 OFFSET $2
`

type ListSuppliersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSuppliers(ctx context.Context, arg ListSuppliersParams) ([]RegistrationSupplier, error) {
	rows, err := q.db.QueryContext(ctx, listSuppliers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RegistrationSupplier
	for rows.Next() {
		var i RegistrationSupplier
		if err := rows.Scan(&i.ID, &i.IDSupplierType, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplier = `-- name: UpdateSupplier :one
UPDATE registration.supplier
SET
  id_supplier_type = $2
, description = $3
WHERE id = $1
RETURNING id, id_supplier_type, description
`

type UpdateSupplierParams struct {
	ID             int32  `json:"id"`
	IDSupplierType int32  `json:"id_supplier_type"`
	Description    string `json:"description"`
}

func (q *Queries) UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) (RegistrationSupplier, error) {
	row := q.db.QueryRowContext(ctx, updateSupplier, arg.ID, arg.IDSupplierType, arg.Description)
	var i RegistrationSupplier
	err := row.Scan(&i.ID, &i.IDSupplierType, &i.Description)
	return i, err
}
