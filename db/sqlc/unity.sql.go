// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: unity.sql

package db

import (
	"context"
)

const createUnity = `-- name: CreateUnity :one
INSERT INTO registration.unity (
    id_building, id_unity_type, unity_number
) VALUES (
    $1, $2, $3
)
RETURNING id, id_building, id_unity_type, unity_number
`

type CreateUnityParams struct {
	IDBuilding  int32  `json:"id_building"`
	IDUnityType int32  `json:"id_unity_type"`
	UnityNumber string `json:"unity_number"`
}

func (q *Queries) CreateUnity(ctx context.Context, arg CreateUnityParams) (RegistrationUnity, error) {
	row := q.db.QueryRowContext(ctx, createUnity, arg.IDBuilding, arg.IDUnityType, arg.UnityNumber)
	var i RegistrationUnity
	err := row.Scan(
		&i.ID,
		&i.IDBuilding,
		&i.IDUnityType,
		&i.UnityNumber,
	)
	return i, err
}

const deleteUnity = `-- name: DeleteUnity :exec
DELETE FROM registration.unity
WHERE id = $1
`

func (q *Queries) DeleteUnity(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUnity, id)
	return err
}

const getUnity = `-- name: GetUnity :one
SELECT id, id_building, id_unity_type, unity_number FROM registration.unity
WHERE id = $1
`

func (q *Queries) GetUnity(ctx context.Context, id int32) (RegistrationUnity, error) {
	row := q.db.QueryRowContext(ctx, getUnity, id)
	var i RegistrationUnity
	err := row.Scan(
		&i.ID,
		&i.IDBuilding,
		&i.IDUnityType,
		&i.UnityNumber,
	)
	return i, err
}

const listUnitys = `-- name: ListUnitys :many
SELECT id, id_building, id_unity_type, unity_number FROM registration.unity
ORDER BY unity_number
LIMIT $1 OFFSET $2
`

type ListUnitysParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUnitys(ctx context.Context, arg ListUnitysParams) ([]RegistrationUnity, error) {
	rows, err := q.db.QueryContext(ctx, listUnitys, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RegistrationUnity
	for rows.Next() {
		var i RegistrationUnity
		if err := rows.Scan(
			&i.ID,
			&i.IDBuilding,
			&i.IDUnityType,
			&i.UnityNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUnity = `-- name: UpdateUnity :one
UPDATE registration.unity
SET
  id_building = $2
, id_unity_type = $3
, unity_number = $4
WHERE id = $1
RETURNING id, id_building, id_unity_type, unity_number
`

type UpdateUnityParams struct {
	ID          int32  `json:"id"`
	IDBuilding  int32  `json:"id_building"`
	IDUnityType int32  `json:"id_unity_type"`
	UnityNumber string `json:"unity_number"`
}

func (q *Queries) UpdateUnity(ctx context.Context, arg UpdateUnityParams) (RegistrationUnity, error) {
	row := q.db.QueryRowContext(ctx, updateUnity,
		arg.ID,
		arg.IDBuilding,
		arg.IDUnityType,
		arg.UnityNumber,
	)
	var i RegistrationUnity
	err := row.Scan(
		&i.ID,
		&i.IDBuilding,
		&i.IDUnityType,
		&i.UnityNumber,
	)
	return i, err
}
