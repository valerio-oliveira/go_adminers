// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: building.sql

package db

import (
	"context"
)

const createBuilding = `-- name: CreateBuilding :one
INSERT INTO registration.building (
    id_condo, id_building_type, description
) VALUES (
    $1, $2, $3
)
RETURNING id, id_condo, id_building_type, description
`

type CreateBuildingParams struct {
	IDCondo        int32  `json:"id_condo"`
	IDBuildingType int32  `json:"id_building_type"`
	Description    string `json:"description"`
}

func (q *Queries) CreateBuilding(ctx context.Context, arg CreateBuildingParams) (RegistrationBuilding, error) {
	row := q.db.QueryRowContext(ctx, createBuilding, arg.IDCondo, arg.IDBuildingType, arg.Description)
	var i RegistrationBuilding
	err := row.Scan(
		&i.ID,
		&i.IDCondo,
		&i.IDBuildingType,
		&i.Description,
	)
	return i, err
}

const deleteBuilding = `-- name: DeleteBuilding :exec
DELETE FROM registration.building
WHERE id = $1
`

func (q *Queries) DeleteBuilding(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBuilding, id)
	return err
}

const getBuilding = `-- name: GetBuilding :one
SELECT id, id_condo, id_building_type, description FROM registration.building
WHERE id = $1
`

func (q *Queries) GetBuilding(ctx context.Context, id int32) (RegistrationBuilding, error) {
	row := q.db.QueryRowContext(ctx, getBuilding, id)
	var i RegistrationBuilding
	err := row.Scan(
		&i.ID,
		&i.IDCondo,
		&i.IDBuildingType,
		&i.Description,
	)
	return i, err
}

const listBuildings = `-- name: ListBuildings :many
SELECT id, id_condo, id_building_type, description FROM registration.building
ORDER BY description
LIMIT $1 OFFSET $2
`

type ListBuildingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBuildings(ctx context.Context, arg ListBuildingsParams) ([]RegistrationBuilding, error) {
	rows, err := q.db.QueryContext(ctx, listBuildings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RegistrationBuilding
	for rows.Next() {
		var i RegistrationBuilding
		if err := rows.Scan(
			&i.ID,
			&i.IDCondo,
			&i.IDBuildingType,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBuilding = `-- name: UpdateBuilding :one
UPDATE registration.building
SET --SET id_condo,
  id_building_type = $2
, description = $3
WHERE id = $1
RETURNING id, id_condo, id_building_type, description
`

type UpdateBuildingParams struct {
	ID             int32  `json:"id"`
	IDBuildingType int32  `json:"id_building_type"`
	Description    string `json:"description"`
}

func (q *Queries) UpdateBuilding(ctx context.Context, arg UpdateBuildingParams) (RegistrationBuilding, error) {
	row := q.db.QueryRowContext(ctx, updateBuilding, arg.ID, arg.IDBuildingType, arg.Description)
	var i RegistrationBuilding
	err := row.Scan(
		&i.ID,
		&i.IDCondo,
		&i.IDBuildingType,
		&i.Description,
	)
	return i, err
}
